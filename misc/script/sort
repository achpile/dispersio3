#!/usr/bin/python3
# -*- coding: utf-8 -*-

##### IMPORT #####

import sys
import json
import getopt
import os


##### GLOBALS #####

minimize = False
verbose  = False
mode     = "JSON"


##### COLORS #####

c_red    = "\033[1;31m"
c_normal = "\033[0m"
c_yellow = "\033[0;33m"
c_green  = "\033[0;32m"
c_cyan   = "\033[1;36m"


##### USAGE #####

def usage():
    print(c_yellow)
    print("JSON sorting script\n")
    print("\t-M : sort maps")
    print("\t-A : sort all")
    print()
    print("\t-v : verbose output")
    print("\t-m : minimize")
    print("\t-h : usage")
    print(c_normal)


##### DELETE #####

def delete(j, key):
    if key in j:
        j.pop(key)

##### CUT #####

def cut_properties(p):
    if "properties" in p:
        for i in p["properties"]:
            delete(i, "type")


def cut_object(o):
    cut_properties(o)

    delete(o, "visible")
    delete(o, "rotation")

    if "polyline" in o:
        delete(o, "name")
        delete(o, "width")
        delete(o, "height")


def cut_tile(t):
    cut_properties(t)

    delete(t, "imagewidth")
    delete(t, "imageheight")


def cut_tileset(t):
    cut_properties(t)

    delete(t, "name")
    delete(t, "grid")
    delete(t, "columns")
    delete(t, "margin")
    delete(t, "spacing")
    delete(t, "tilecount")
    delete(t, "tilewidth")
    delete(t, "tileheight")

    for i in t["tiles"]:
        cut_tile(i)


def cut_layer(l):
    cut_properties(l)

    delete(l, "id")
    delete(l, "x")
    delete(l, "y")
    delete(l, "width")
    delete(l, "height")
    delete(l, "visible")
    delete(l, "opacity")
    delete(l, "draworder")

    if "objects" in l:
        for o in l["objects"]:
            cut_object(o)


def cut(j):
    cut_properties(j)

    delete(j, "compressionlevel")
    delete(j, "infinite")
    delete(j, "nextlayerid")
    delete(j, "nextobjectid")
    delete(j, "orientation")
    delete(j, "renderorder")
    delete(j, "type")
    delete(j, "version")
    delete(j, "tiledversion")

    for i in j["layers"]:
        cut_layer(i)

    for i in j["tilesets"]:
        cut_tileset(i)

    return j


##### SORT #####

def sort(filename, tmj = False):
    if verbose:
        if tmj:
            print(c_cyan  + " Cutting   " + c_normal + " : " + c_yellow + filename + c_normal)
        else:
            print(c_green + " Sorting   " + c_normal + " : " + c_yellow + filename + c_normal)

    f = open(filename, "r")
    a = {}

    try:
        j = json.loads(f.read())
    except ValueError as e:
        print("Wrong file {0}: {1}".format(filename, e))
        return
    finally:
        f.close()

    if tmj:
        j = cut(j)

    if minimize:
        a['indent'] = None
        a['separators'] = (",", ":")
    else:
        a['indent'] = 4

    f = open(filename, "w")
    f.write(json.dumps(j, sort_keys = True, ensure_ascii = False, **a))
    f.write("\n")
    f.close()


##### MAIN #####

try:
    opts, args = getopt.getopt(sys.argv[1:], "mvhMA")
except getopt.GetoptError as err:
    print(c_red + str(err) + c_normal)
    usage()
    sys.exit(2)


for arg, opt in opts:
    if arg == "-m":
        minimize = True
    elif arg == "-v":
        verbose = True
    elif arg == "-M":
        mode = "Maps"
    elif arg == "-A":
        mode = "All"
    elif arg == "-h":
        usage()
        sys.exit(0)

if args:
    usage()
    sys.exit(2)

if verbose:
    print()

if mode in ["Maps", "All"]:
    for root, dirs, files in os.walk("data"):
        for file in files:
            if file.endswith(".tmj"):
                sort(os.path.join(root, file), True)
    if verbose:
        print()

if mode in ["JSON", "All"]:
    for root, dirs, files in os.walk("data"):
        for file in files:
            if file.endswith(".json"):
                sort(os.path.join(root, file))
    if verbose:
        print()
